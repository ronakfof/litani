name: Recover Tags
on:
  - delete

jobs:
  recover-tags:
    name: Recover Tags
    permissions: read-all
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # - name: echo
      #   run: |
      #     brew install jq
      #     git config --global user.email "${GITHUB_ACTOR}"
      #     git config --global user.name "${GITHUB_ACTOR}@users.noreply.github.com"
      #     git remote set-url origin https://x-access-token:${{ secrets.RELEASE_CI_ACCESS_TOKEN }}@github.com/${{ github.repository }}
      #     # git tag ${{ github.event.ref }} $(cat tag-sha-config.json |  jq -r '."${{ github.event.ref }}"') -m "retag"
      #     # git push origin ${{ github.event.ref }}
      # - name: Create tag
      #   run: |
      #     curl -s -X POST https://api.github.com/repos/ronakfof/litani/git/refs \
      #     -H "Authorization: token ${{ secrets.RELEASE_CI_ACCESS_TOKEN }}" \
      #     -d @- << EOF
      #     {
      #       "ref": "refs/tags/${{ github.event.ref }}",
      #       "sha": "$(cat tag-sha-config.json |  jq -r '."${{ github.event.ref }}"')"
      #     }
      #     EOF
      - uses: actions/github-script@v6
        with:
          script: |
            const repo_owner = context.repo.owner;
            const repo_name = context.repo.repo;
            const commit_sha = e72241cbb0280788a2d76c1303e2f65d1165d401;
            const tag_name = 1.18.0;
            const tag_message = "Retag";
            const tag_response = github.rest.git.createTag({
              owner: repo_owner,
              repo: repo_name,
              tag: tag_name,
              message: tag_message,
              object: commit_sha,
              type: 'commit'
            });
            if (201 !== tag_response.status) {
              setFailed(`Failed to create tag object (status=${tag_response.status})`);
              return;
            }